/*
 * Copyright (c) 2022, Salesforce.com, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

import java.io.File;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.Random;
import java.util.Map;
import java.util.HashMap;

public class CLASS_NAME {
    final static Random rand = new Random();
    final static ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
    final static int maxDepth=%s, txCount=%s;

    public static void memory() {
        int memAllocSize;
        if(rand.nextInt(100)<=%s) {
            memAllocSize=8192;
        } else {
            memAllocSize=1024;
        }
        for(int i=0; i < memAllocSize; i++) {
            byte[] bytes = new byte[1048576]; // 1MB
            bytes[0] = 'c';
        }
    }

    public static void cpu() {
        long loopTime;
        if(rand.nextInt(100)<=%s) {
            loopTime=5_000L;
        } else {
            loopTime=500L;
        }
        long startTime = System.currentTimeMillis();
        Map<Integer, Integer> counts = new HashMap<>();
        int i=0;
        String rand = "";
        while ((System.currentTimeMillis() - startTime) < loopTime) {
            counts.put(i, i);
            rand += i;
        }
    }

    public static void io() {
        try {
            File tmp = File.createTempFile("data", null);
            tmp.deleteOnExit();
            byte[] genStr = null;
            int tempFileSize;
            if(rand.nextInt(100)<=%s) {
                tempFileSize=64;
            } else {
                tempFileSize=8;
            }
            for(int i=0; i<tempFileSize; i++) {
                genStr = rand.ints(48, 123)
                    .filter(c -> (c<=57 || c>=65) && (c<=90 || c>=97))
                    .limit(1048576) // 1MB
                    .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                    .toString().getBytes(StandardCharsets.UTF_8);
                Files.write(tmp.toPath(), genStr, StandardOpenOption.CREATE);
            }
        } catch (Exception ignored) {
        }
    }
    %s
    public static void main(String[] args) throws InterruptedException {
        for(int i=0; i<txCount; i++) {
            Thread.sleep(rand.nextInt(2000));
            TxCPUEvent txCPUEvent = new TxCPUEvent();
            txCPUEvent.begin();
            method_0_0(0);
            txCPUEvent.cpu = threadBean.getCurrentThreadCpuTime();
            txCPUEvent.commit();
        }
    }
}
